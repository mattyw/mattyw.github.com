<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | mattyw]]></title>
  <link href="http://mattyw.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://mattyw.github.io/"/>
  <updated>2015-11-25T14:33:01+00:00</updated>
  <id>http://mattyw.github.io/</id>
  <author>
    <name><![CDATA[Matt Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure programming in acme]]></title>
    <link href="http://mattyw.github.io/blog/2013/10/17/clojure-programming-in-acme/"/>
    <updated>2013-10-17T14:04:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/10/17/clojure-programming-in-acme</id>
    <content type="html"><![CDATA[<p>Today I finally got round to trying out something i&rsquo;d been meaning to look into for nearly a year, and seeing as clojure and editors seems to be a topic again I thought it would help add some diversity.</p>

<p>Acme is an editor unlike any other. It was designed by Rob Pike for Plan9 (although it&rsquo;s available for unix-like systems using <a href="http://swtch.com/plan9port/">Plan9 from User Space</a>).
It&rsquo;s designed to be an editor and shell. Unlike emacs and vim which encourage you to keep your hands on the keyboard, acme requires use of a 3-button mouse, and it supports something called mouse chording. A rough guide would be:</p>

<ul>
<li>Button 1: Select Text</li>
<li>Button 2: Execute Command</li>
<li>Button 3: Search/ acquire text (or load file)</li>
<li>Button 1-2 Cutting</li>
<li>Button 1-3 Pasting</li>
<li>Button 1-2,3 Cut+Paste (Copy)</li>
</ul>


<p>My introduction to acme was via Russ Cox' video, which is a great starting point:</p>

<iframe width="560" height="315" src="http://mattyw.github.io//www.youtube.com/embed/dP1xVpMPn8M" frameborder="0" allowfullscreen></iframe>


<p>You can probably summarise the whole thing by saying that in acme &ndash; text is data. Once you type some text, it can be saved into a file, executed as a command or passed as an argument to a command.</p>

<p>Obviously this resonated with the clojure part of my brain. It occured to me that being able to select some clojure code in acme and evaluate it would make acme a great editor for clojure.</p>

<p>Thanks to nrepl the job is really quite easy. I wrote a very <em>very</em> simple nrepl client in go. You can find it on my <a href="https://github.com/mattyw/gonrepl">github</a></p>

<p>All it does is read clojure code from stdin and send it to nrepl. This is really all there is to do. In acme you just need to type your command in one of the scratch areas:</p>

<p>Take a look at the below screenshot. You can see:</p>

<ol>
<li>In yellow: selected clojure code with mouse button 1</li>
<li>In red: selected command with mouse button two</li>
<li>Release the buttons and the window in the bottom right contains the evalutated code</li>
</ol>


<p><a href="http://imgur.com/NoEHuqV"><img src="http://i.imgur.com/NoEHuqV.png" title="Hosted by imgur.com" /></a></p>

<p>Here&rsquo;s a video of me doing it:</p>

<iframe src="http://mattyw.github.io//player.vimeo.com/video/77128688" width="500" height="345" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/77128688">Clojure in Acme</a> from <a href="http://vimeo.com/user5806599">Matthew Williams</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>

<p>To get this setup yourself:</p>

<ol>
<li>Install plan9 from user space to get acme</li>
<li>run lein repl in some terminal</li>
<li>You&rsquo;ll need a command line tool that can take clojure code on stdin and send it to nrepl. I used my own gonrepl tool- To use that you need to install go then run:</li>
</ol>


<p><code>bash
go install github.com/mattyw/gonrepl/...
</code></p>

<p>That&rsquo;s it. Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[simple macros in clojure and elixir]]></title>
    <link href="http://mattyw.github.io/blog/2013/08/13/simple-macros-in-clojure-and-elixir/"/>
    <updated>2013-08-13T17:34:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/08/13/simple-macros-in-clojure-and-elixir</id>
    <content type="html"><![CDATA[<p>Don&rsquo;t write macros is a pretty good rule, but when you&rsquo;re learning a language it&rsquo;s quite a fun little exercise.
One such exercise I like to try is this:</p>

<p><strong>Write a function so that I can call system commands without having to wrap them in quotes.</strong></p>

<p>So rather than doing this:</p>

<p>cmd([&ldquo;grep&rdquo;, &ldquo;-rin&rdquo;, &ldquo;foo&rdquo;, &ldquo;./&rdquo;])</p>

<p>I can do this:</p>

<p>cmd([grep, -rin, foo, ./])</p>

<h3>Clojure</h3>

<p>In lisps like clojure, the solution is very elegant, thanks to the minimal syntax, you end up with something like:</p>

<p><code>clojure
(call grep -rin foo "./")
</code></p>

<p>And the macro to do it is also pretty elegant:</p>

<p><code>clojure
(defmacro mcall [&amp; args]
  (let [sym (gensym)]
  `(apply sh (map str '~args))))
</code></p>

<p>Not too much magic (as far as macros are concerned) here. Make a unique symbol with (gensysm) to keep our macro hygienic.
We syntax quote our whole list using ` to not evaluate anything unless we say so. That means we have to do some magic with our args parameter: &lsquo;~args. ~ here means
evaluate args (so we get the symbols we passed in) but then we quote with &rsquo; so that we don&rsquo;t evaluate these symbols. That&rsquo;s the magic that lets us not need quotes around our arguments.
The rest of the code just puts them in the right place by mapping our args list against the str function and applying it to sh.
This is how you use it:</p>

<p><code>clojure
(prn (mcall ls -l))
(prn (mcall grep -rin not "./")) ; We still need quotes around ./ because it's not valid syntax
</code></p>

<p>By coincidence I blogged about clojure macros almost exactly one year ago: <a href="http://mattyjwilliams.blogspot.co.uk/2012/08/another-clojure-macro-tutorial-that-no.html">http://mattyjwilliams.blogspot.co.uk/2012/08/another-clojure-macro-tutorial-that-no.html</a></p>

<h3>Elixir</h3>

<p>Elixir is a lovely little language I&rsquo;ve been playing with recently, so naturally I wanted to try out the macros.
I needed to ask a few questions on the irc channel (thanks ericmj and true_droid!), but I got it cracked:</p>

<p>```elixir
defmacro mcall(args) do</p>

<pre><code>call = Enum.map_join(args, " ", Macro.to_string(&amp;1))
quote do
  System.cmd(unquote(call))
end
</code></pre>

<p>end
<code>
Again, not much magic, map_join maps our list using the Macro.to_string function then joins at the end, this is done outside of the quote since we will work it out at compile time.
We then pass this to System.cmd in a quote block - which means don't evaluate this yet, that will happen when we call mcall at runtime.
</code>elixir
IO.inspect MacroTest.mcall([ls, -l])
IO.inspect MacroTest.mcall([grep, -rin, def, &ldquo;./&rdquo;]) # We still need quotes around ./ because it&rsquo;s not valid syntax
```</p>
]]></content>
  </entry>
  
</feed>
