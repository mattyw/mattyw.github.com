<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: raspberrypi | mattyw]]></title>
  <link href="http://mattyw.github.io/blog/categories/raspberrypi/atom.xml" rel="self"/>
  <link href="http://mattyw.github.io/"/>
  <updated>2015-10-19T13:09:10+01:00</updated>
  <id>http://mattyw.github.io/</id>
  <author>
    <name><![CDATA[Matt Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Video: Juju status flasher on ubuntu snappy]]></title>
    <link href="http://mattyw.github.io/blog/2015/10/18/snappy-juju-flasher-video/"/>
    <updated>2015-10-18T10:02:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2015/10/18/snappy-juju-flasher-video</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/JnbrWRDFqVo" frameborder="0" allowfullscreen></iframe>


<p>I&rsquo;d like to share a proof of concept project I&rsquo;ve been working on that combines
the worlds of ubuntu snappy and juju.</p>

<p>I wanted to use the flashing leds on the raspberry pi 2&rsquo;s piglow to tell me the
status of my cloud services. The idea being that if there&rsquo;s something I need to fix
the flashing leds will tell me, without me having to keep checking my phone or laptop
to get updates.</p>

<p>This demo will use the <a href="https://jujucharms.com/realtime-syslog-analytics/">realtime syslog analytics</a>
big data bundle as my example environment. It&rsquo;s deployed in ec2 but it&rsquo;s controlled and managed
by juju running on my raspberry pi. I&rsquo;m going to show you a working environment with happy led status.
Then I&rsquo;m going to cause some trouble and we&rsquo;ll see the leds change to unhappy.</p>

<p>The idea being that if I want to know the status of my cloud services I only need to glance at my
raspberry pi for a moment.</p>

<p>There&rsquo;s still some work to be done around optimising the various led patterns. There could be a way
that I could convey seriousness of the problem via the leds, or even how long there has been a problem.
That&rsquo;s work that can come later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple piglow snap for Raspberry Pi 2]]></title>
    <link href="http://mattyw.github.io/blog/2015/10/09/simple-piglow-snap-for-raspberry-pi-2/"/>
    <updated>2015-10-09T22:43:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2015/10/09/simple-piglow-snap-for-raspberry-pi-2</id>
    <content type="html"><![CDATA[<p>Using a Raspberry Pi 2 with Ubuntu Snappy installed we&rsquo;re going to write a
simple snap that will flash a piglow attached to the gpio pins.</p>

<p>If you want to skip these steps you can download the snap itself from <a href="https://www.dropbox.com/s/2o298qugyts0r3o/hello-piglow_1.0.0_all.snap?dl=0">here</a></p>

<h2>1. A simple piglow flashing binary</h2>

<p>To make things simple we&rsquo;ll use go to produce a simple binary that will
flash the legs of the piglow. We&rsquo;re using go because the static compilation means
our snap will have no dependencies to deal with. The code itself is small.
<a href="https://github.com/mattyw/flasher">https://github.com/mattyw/flasher</a>
I modified the piglow library I was using to get a bit more feedback about piglow
errors, the change is trivial to revert should you need to.</p>

<h2>2. Create the snap</h2>

<p>The package structure is simple</p>

<p>```bash
├── bin
│   └── flasher
└── meta</p>

<pre><code>├── package.yaml
└── readme.md
</code></pre>

<p>```</p>

<p>flasher is the binary I produced in step 1. The package.yaml just contains
information about the snap:</p>

<p><code>yaml
name: hello-piglow
version: 1.0.0
vendor: me
binaries:
 - name: bin/flasher
</code>
Once you&rsquo;ve got all this in place build it and send it over to your pi.</p>

<p><code>bash
snappy build .                                                                  
snappy-remote --url=ssh://&lt;ip-address&gt;:22 install &lt;snap-name&gt;
</code></p>

<h2>3. On the Pi</h2>

<p>You need to give your snap permission to access the i2c device</p>

<p><code>bash
sudo snappy hw-assign hello-piglow.sideload /dev/i2c-1
</code></p>

<h2>4. You&rsquo;re done</h2>

<p><code>bash
sudo hello-piglow.flasher
</code></p>

<p>If all goes well you should have a flashing piglow</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/73tOQBqef7Q" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taming the cloud with juju and raspberry pi]]></title>
    <link href="http://mattyw.github.io/blog/2013/06/27/taming-the-cloud-with-juju-and-raspberry-pi/"/>
    <updated>2013-06-27T08:01:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/06/27/taming-the-cloud-with-juju-and-raspberry-pi</id>
    <content type="html"><![CDATA[<h2>The idea</h2>

<p>We&rsquo;re going to use a raspberry pi and juju to setup a wordpress blog on aws.</p>

<p>The raspberry pi is an amazing little gadget. Low power enough that I don&rsquo;t feel guilty about leaving it turned on overnight, but flexible enough that I can shove leds into it to grab my attention if needed.</p>

<p><a href="http://juju.ubuntu.com">Juju</a> is ubuntu&rsquo;s answer to setting up services in the cloud. Once installed you simply setup your credentials with an existing cloud provider like aws or hp cloud and then deploy things into it. Setting up wordpress for example is as simple as
<code>bash
juju bootstrap # Setup the cloud environment
juju deploy wordpress # Start an instance and install wordpress on it
juju deploy mysql # Start an instance and install mysql on it
juju add-relation wordpress mysql # Connect wordpress and mysql together
juju expose wordpress #Allow wordpress to be accessed from a public ip
</code></p>

<h2>The Plan</h2>

<ol>
<li>Install go onto the raspberry pi</li>
<li>Install juju</li>
<li>Deploy a wordpress blog</li>
</ol>


<p>We&rsquo;re going to be installing the latest version of juju which is written in go.</p>

<h2>Installing Go</h2>

<p>Dave Cheney has written an excellent article on <a href="http://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">Installing go on the raspberry pi</a>. On my model B (1.0 revision) I had to update raspi-config so that I could select the 240M/16M memory split, but you might have to see how you get on here. I choose to skip the tests and just ran ./make.bash to build go rather than all.bash.</p>

<p>I was unable to build juju using go 1.0.3. I ended up building go 1.1.1 from source, which seemed to work fine. From memory I believe you need to setup a folder to be your GOPATH before you can install the latest version of go.</p>

<h2>Installing Juju</h2>

<p>Getting the latest tip of juju-core is easy using the go get command, it grabs all the dependencies for you, it does mean we&rsquo;re grabbing tip, but there are ways to fix that later if we need to. juju-core is hosted on launchpad.net which uses bazaar for source control. This means you need to install it before you can run go get. I was able to install it on raspian using
<code>bash
sudo apt-get update
sudo apt-get bzr
</code>
Without doing the update I was unable to grab all of bzr&rsquo;s dependencies, so I recommend running the update first.</p>

<p>Once bzr is installed you can install juju using go get:
<code>bash
sudo apt-get install libcurl4-gnutls-dev
go get launchpad.net/juju-core/...
</code>
When it&rsquo;s finished you should find a juju binary installed. Mine ended up in my GOPATH, I think because I had something setup wrong somewhere. But if you&rsquo;ve got this far I&rsquo;m sure you&rsquo;ll be able to find it.</p>

<h2>Setting up Juju</h2>

<p>There&rsquo;s much better instructions for setting up juju <a href="https://juju.ubuntu.com/get-started/">here</a> The basic steps come down to</p>

<ol>
<li>Setting up a public key</li>
<li>Generating an environments.yaml file</li>
<li>Filling the file in with the data for your cloud provider</li>
</ol>


<p>I configured juju for aws. My ~/.juju/environments.yaml file looked like this:
```yaml
default: amazon
environments:
  amazon:</p>

<pre><code>type: ec2
  access-key: MY AWS ACCESS KEY
  secret-key: MY AWS SECRET KEY
  control-bucket: mattyw-ec2-bucket
  admin-secret: mattyw-ec2-admin
</code></pre>

<p>```
Once you&rsquo;ve done this, try running <strong>juju bootstrap</strong>. If it finishes without error wait a minute or so and run <strong>juju status</strong>, If all goes well you should see something like this</p>

<p>```yaml
$ juju status
machines:
  &ldquo;0&rdquo;:</p>

<pre><code>agent-state: started
agent-version: 1.11.0
dns-name: ec2-23-20-228-111.compute-1.amazonaws.com
instance-id: i-0bfc3d64
series: precise
</code></pre>

<p>services: {}
```</p>

<p>Now we can start the business of getting a blog up and running:</p>

<p><code>bash
juju deploy wordpress
juju deploy mysql
juju add-relation wordpress mysql
juju expose wordpress
</code>
You might have to wait a few minutes for everything to start up, keep taking a look at the output of <strong>juju status</strong> until you see all the agent-states running and expose true on wordpress.</p>

<p>When it&rsquo;s done you should see something like this in your juju status output:
```yaml
 wordpress:</p>

<pre><code>charm: cs:precise/wordpress-15
exposed: true
relations:
  db:
  - mysql
  loadbalancer:
  - wordpress
units:
  wordpress/0:
    agent-state: started
    agent-version: 1.11.0
    machine: "1"
    public-address: ec2-54-234-76-38.compute-1.amazonaws.com
</code></pre>

<p>```</p>

<p>Now point your web browser to the url in public-address and there you go, you&rsquo;re deploying stuff from your pi.</p>

<p>Juju doesn&rsquo;t stop at just deploying blogs. Check out <a href="http://juju.ubuntu.com">Juju</a> to see what else it can do for you</p>
]]></content>
  </entry>
  
</feed>
