<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: juju | mattyw]]></title>
  <link href="http://mattyw.github.io/blog/categories/juju/atom.xml" rel="self"/>
  <link href="http://mattyw.github.io/"/>
  <updated>2015-11-25T14:33:01+00:00</updated>
  <id>http://mattyw.github.io/</id>
  <author>
    <name><![CDATA[Matt Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[go binary charm layer]]></title>
    <link href="http://mattyw.github.io/blog/2015/11/25/go-binary-charm-layer/"/>
    <updated>2015-11-25T09:26:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/11/25/go-binary-charm-layer</id>
    <content type="html"><![CDATA[<p>I like go. One of the things I like is not worrying about dependencies during deployment.
You just scp your binary to your server and you&rsquo;re done. Well, after you configure it to connect to the
database, ah yes, we forgot about haproxy, let&rsquo;s set that up as well, but after scping to
a server and doing some minor setup you&rsquo;re ready to go, scale it out you say? Just scp to other
servers, do the same config setup&hellip;&hellip;..</p>

<p>The solution to this problem is to use an orchestration tool like <a href="https://juju.ubuntu.com/about">juju</a>. Now thanks to the <a href="https://github.com/cloud-green/go-binary-layer">go binary layer</a> orchestrating your go program with juju couldn&rsquo;t be easier.</p>

<p>Here&rsquo;s how it works. The go-binary layer looks in the top level of your charm for a go-binary.yaml file that contains the name of your binary and any arguments that should be passed to it.
```yaml</p>

<h1>go-binary.yaml</h1>

<p>binary: server
args: /etc/myserver/config.yaml
```</p>

<p>Your compiled binary should be placed in a &ldquo;files&rdquo; directory at the top level of your charm. Build your charm and you&rsquo;re all done.
<code>bash
$ tree
.
├── files
│   ├── server
├── go-binary.yaml
├── layer.yaml
├── metadata.yaml
</code></p>

<p>Under the covers the go-binary layer will add your binary to $PATH,write an upstart file for your binary and start it when the server starts.</p>

<p>There are examples of this in action with the http (website) relation (<a href="https://github.com/mattyw/simple-server-charm">https://github.com/mattyw/simple-server-charm</a>)</p>

<p>and with the mongodb relation (<a href="https://github.com/mattyw/simple-server-mongo-charm">https://github.com/mattyw/simple-server-mongo-charm</a>).</p>

<p>If you&rsquo;d like to see these charms in action take a look at the following videos:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/YgYOyf-3QwU" frameborder="0" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/Cf5o58MzCjs" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The remote-deployer charm: Playing with Juju during a tea break]]></title>
    <link href="http://mattyw.github.io/blog/2015/10/29/juju-charm-shortcut/"/>
    <updated>2015-10-29T11:23:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/10/29/juju-charm-shortcut</id>
    <content type="html"><![CDATA[<p>The power of juju, and its model driven approach to deployments is
undoubtedly the relationships. Being able to specify what services you
depend on and what you provide to other services is extremely powerful.</p>

<p>To get all of those benefits you need to write your app as a charm. With the new
layering approach (<a href="http://blog.dasroot.net/2015-charming-2-point-oh.html">http://blog.dasroot.net/2015-charming-2-point-oh.html</a>) this has
got even easier. There will be more posts about that coming soon.</p>

<p>But I&rsquo;ve always pondered the following:</p>

<p><em>Is there a useful shortcut around writing a charm that would let you deploy your app in &lt; 5 minutes</em></p>

<p>My idea was the remote-deployer charm (<a href="https://jujucharms.com/u/mattyw/remote-deployer/trusty/2">https://jujucharms.com/u/mattyw/remote-deployer/trusty/2</a>)</p>

<p>It doesn&rsquo;t replace writing your own charm, indeed the cases in which it&rsquo;s useful are limited.
(you must have a publicly available file path that you want to deploy from)
<strong>The intention is to facilitate playing with juju in less time than the typical tea break.</strong></p>

<p>The idea goes:</p>

<ol>
<li>Deploy the charm</li>
<li>Give it something to do</li>
</ol>


<p><code>bash
juju deploy cs:~mattyw/trusty/remote-deployer-2
juju action do remote-deployer/0 deploy source=https://github.com/mattyw/compojure-app-bootstrap
</code></p>

<p>The something to do is just pointing it at some remote file tree (like a github url).
It downloads this file tree and looks for a file called <strong>remote-deployer</strong>. It runs this
as the ubuntu user. The example above installs the clojure build tool lein and creates
a hello world web app (<a href="https://github.com/mattyw/compojure-app-bootstrap">https://github.com/mattyw/compojure-app-bootstrap</a>)
```bash</p>

<h1>remote-deployer</h1>

<h1>!/bin/sh</h1>

<p>set -ev
sudo apt-get install -y &mdash;force-yes openjdk-7-jre-headless
sudo cp lein /usr/bin
cd $HOME &amp;&amp; lein new compojure-app my-app
cd $HOME/my-app &amp;&amp; nohup lein ring server &amp;
open-port 3000
```</p>

<p>Juju fans will notice that the normal hook tools are available to you in this file.</p>

<p>If you&rsquo;d like to suggest or help make improvements the project is here: <a href="https://github.com/mattyw/remote-deployer-charm">https://github.com/mattyw/remote-deployer-charm</a></p>

<p>Take a look at in action:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2a2WxDN4ZJM" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: Juju status flasher on ubuntu snappy]]></title>
    <link href="http://mattyw.github.io/blog/2015/10/18/snappy-juju-flasher-video/"/>
    <updated>2015-10-18T10:02:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2015/10/18/snappy-juju-flasher-video</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/JnbrWRDFqVo" frameborder="0" allowfullscreen></iframe>


<p>I&rsquo;d like to share a proof of concept project I&rsquo;ve been working on that combines
the worlds of ubuntu snappy and juju.</p>

<p>I wanted to use the flashing leds on the raspberry pi 2&rsquo;s piglow to tell me the
status of my cloud services. The idea being that if there&rsquo;s something I need to fix
the flashing leds will tell me, without me having to keep checking my phone or laptop
to get updates.</p>

<p>This demo will use the <a href="https://jujucharms.com/realtime-syslog-analytics/">realtime syslog analytics</a>
big data bundle as my example environment. It&rsquo;s deployed in ec2 but it&rsquo;s controlled and managed
by juju running on my raspberry pi. I&rsquo;m going to show you a working environment with happy led status.
Then I&rsquo;m going to cause some trouble and we&rsquo;ll see the leds change to unhappy.</p>

<p>The idea being that if I want to know the status of my cloud services I only need to glance at my
raspberry pi for a moment.</p>

<p>There&rsquo;s still some work to be done around optimising the various led patterns. There could be a way
that I could convey seriousness of the problem via the leds, or even how long there has been a problem.
That&rsquo;s work that can come later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Juju means I don't need a VPS]]></title>
    <link href="http://mattyw.github.io/blog/2013/08/16/why-juju-means-i-dont-need-a-vps/"/>
    <updated>2013-08-16T13:45:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/08/16/why-juju-means-i-dont-need-a-vps</id>
    <content type="html"><![CDATA[<p>tl;dr: <a href="http://juju.ubuntu.com">Juju</a> is aimed at deploying and scaling hundreds of services. But it&rsquo;s also a handy alternative to buying a VPS.</p>

<p>I don&rsquo;t have a VPS, I have in the past but I&rsquo;ve never used them enough for me to be able to justify the cost long term.
Juju provides a perfect solution to this use case.</p>

<p>I have a very simple charm I call <a href="https://github.com/mattyw/charm_collection/tree/master/charms/precise/devenv">devenv</a>, it doesn&rsquo;t do much more than install stuff I use for doing development, like installing tmux and grabbing my configuration files. I&rsquo;ve blogged about it previously <a href="http://mattyjwilliams.blogspot.co.uk/2013/05/deploying-development-machine-with-juju.html">here</a>.</p>

<p>This week I was having trouble getting a client library to connect to a simple server program I&rsquo;d written, I was lost with debugging but luckily the library author volunteered to help me out.
I already had a binary of the server that could be used to generate the error in the client library, but I don&rsquo;t have a VPS, so what&rsquo;s the quickest way for me to make the server public so the library author can play around with it?</p>

<p><a href="http://juju.ubuntu.com">Juju!</a></p>

<p>All I needed to do was to add the following line to the start hook of my devenv charm:</p>

<p><code>bash
./app &amp;
</code></p>

<p>And copy the app binary to my charm directory.</p>

<p>It&rsquo;s sort of an anti pattern &ndash; but because juju copies the whole charm dir when it deploys, it will grab any binaries in the charm dir as well, it&rsquo;s not a great idea to make use of this for serious deployments, but for me it was great</p>

<p>With that done all I had to do was deploy it:
<code>bash
juju bootstrap
juju deploy --repository=charms local:precise/devenv
</code></p>

<p>From deciding I wanted to deploy the binary &ndash; to having it deployed was under 5 minutes. 20 minutes later the library was fixed and the server was taken down
<code>bash
juju destroy-environment
</code></p>

<p>That was it. All in all it cost around $0.02 (that&rsquo;s just over 1p). Much better than having a VPS that would largely sit idle.</p>

<p>Of course the other advantage with using juju is that I&rsquo;m not tied to a particular cloud provider, so I can choose which one I want depending on the pricing at that moment. And since juju now supports local mode you can do your charm development offline to save even more money!</p>

<p><strong>Great, how does this help me?</strong></p>

<p>If you&rsquo;re thinking of getting a VPS &ndash; but don&rsquo;t feel you can justify the cost because of the amount of use you&rsquo;d get out of it, then you really should try out juju. Once you&rsquo;ve got it installed there&rsquo;s a handy charm that just deploys ubuntu server, it&rsquo;s a great starting point for writing a charm to setup your own development environment.
<code>bash
juju deploy ubuntu
</code></p>

<p>Here&rsquo;s another link to my post about writing a charm to build a development machine: <a href="http://mattyjwilliams.blogspot.co.uk/2013/05/deploying-development-machine-with-juju.html">http://mattyjwilliams.blogspot.co.uk/2013/05/deploying-development-machine-with-juju.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taming the cloud with juju and raspberry pi]]></title>
    <link href="http://mattyw.github.io/blog/2013/06/27/taming-the-cloud-with-juju-and-raspberry-pi/"/>
    <updated>2013-06-27T08:01:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/06/27/taming-the-cloud-with-juju-and-raspberry-pi</id>
    <content type="html"><![CDATA[<h2>The idea</h2>

<p>We&rsquo;re going to use a raspberry pi and juju to setup a wordpress blog on aws.</p>

<p>The raspberry pi is an amazing little gadget. Low power enough that I don&rsquo;t feel guilty about leaving it turned on overnight, but flexible enough that I can shove leds into it to grab my attention if needed.</p>

<p><a href="http://juju.ubuntu.com">Juju</a> is ubuntu&rsquo;s answer to setting up services in the cloud. Once installed you simply setup your credentials with an existing cloud provider like aws or hp cloud and then deploy things into it. Setting up wordpress for example is as simple as
<code>bash
juju bootstrap # Setup the cloud environment
juju deploy wordpress # Start an instance and install wordpress on it
juju deploy mysql # Start an instance and install mysql on it
juju add-relation wordpress mysql # Connect wordpress and mysql together
juju expose wordpress #Allow wordpress to be accessed from a public ip
</code></p>

<h2>The Plan</h2>

<ol>
<li>Install go onto the raspberry pi</li>
<li>Install juju</li>
<li>Deploy a wordpress blog</li>
</ol>


<p>We&rsquo;re going to be installing the latest version of juju which is written in go.</p>

<h2>Installing Go</h2>

<p>Dave Cheney has written an excellent article on <a href="http://dave.cheney.net/2012/09/25/installing-go-on-the-raspberry-pi">Installing go on the raspberry pi</a>. On my model B (1.0 revision) I had to update raspi-config so that I could select the 240M/16M memory split, but you might have to see how you get on here. I choose to skip the tests and just ran ./make.bash to build go rather than all.bash.</p>

<p>I was unable to build juju using go 1.0.3. I ended up building go 1.1.1 from source, which seemed to work fine. From memory I believe you need to setup a folder to be your GOPATH before you can install the latest version of go.</p>

<h2>Installing Juju</h2>

<p>Getting the latest tip of juju-core is easy using the go get command, it grabs all the dependencies for you, it does mean we&rsquo;re grabbing tip, but there are ways to fix that later if we need to. juju-core is hosted on launchpad.net which uses bazaar for source control. This means you need to install it before you can run go get. I was able to install it on raspian using
<code>bash
sudo apt-get update
sudo apt-get bzr
</code>
Without doing the update I was unable to grab all of bzr&rsquo;s dependencies, so I recommend running the update first.</p>

<p>Once bzr is installed you can install juju using go get:
<code>bash
sudo apt-get install libcurl4-gnutls-dev
go get launchpad.net/juju-core/...
</code>
When it&rsquo;s finished you should find a juju binary installed. Mine ended up in my GOPATH, I think because I had something setup wrong somewhere. But if you&rsquo;ve got this far I&rsquo;m sure you&rsquo;ll be able to find it.</p>

<h2>Setting up Juju</h2>

<p>There&rsquo;s much better instructions for setting up juju <a href="https://juju.ubuntu.com/get-started/">here</a> The basic steps come down to</p>

<ol>
<li>Setting up a public key</li>
<li>Generating an environments.yaml file</li>
<li>Filling the file in with the data for your cloud provider</li>
</ol>


<p>I configured juju for aws. My ~/.juju/environments.yaml file looked like this:
```yaml
default: amazon
environments:
  amazon:</p>

<pre><code>type: ec2
  access-key: MY AWS ACCESS KEY
  secret-key: MY AWS SECRET KEY
  control-bucket: mattyw-ec2-bucket
  admin-secret: mattyw-ec2-admin
</code></pre>

<p>```
Once you&rsquo;ve done this, try running <strong>juju bootstrap</strong>. If it finishes without error wait a minute or so and run <strong>juju status</strong>, If all goes well you should see something like this</p>

<p>```yaml
$ juju status
machines:
  &ldquo;0&rdquo;:</p>

<pre><code>agent-state: started
agent-version: 1.11.0
dns-name: ec2-23-20-228-111.compute-1.amazonaws.com
instance-id: i-0bfc3d64
series: precise
</code></pre>

<p>services: {}
```</p>

<p>Now we can start the business of getting a blog up and running:</p>

<p><code>bash
juju deploy wordpress
juju deploy mysql
juju add-relation wordpress mysql
juju expose wordpress
</code>
You might have to wait a few minutes for everything to start up, keep taking a look at the output of <strong>juju status</strong> until you see all the agent-states running and expose true on wordpress.</p>

<p>When it&rsquo;s done you should see something like this in your juju status output:
```yaml
 wordpress:</p>

<pre><code>charm: cs:precise/wordpress-15
exposed: true
relations:
  db:
  - mysql
  loadbalancer:
  - wordpress
units:
  wordpress/0:
    agent-state: started
    agent-version: 1.11.0
    machine: "1"
    public-address: ec2-54-234-76-38.compute-1.amazonaws.com
</code></pre>

<p>```</p>

<p>Now point your web browser to the url in public-address and there you go, you&rsquo;re deploying stuff from your pi.</p>

<p>Juju doesn&rsquo;t stop at just deploying blogs. Check out <a href="http://juju.ubuntu.com">Juju</a> to see what else it can do for you</p>
]]></content>
  </entry>
  
</feed>
