<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: juju | mattyw]]></title>
  <link href="http://mattyw.github.io/blog/categories/juju/atom.xml" rel="self"/>
  <link href="http://mattyw.github.io/"/>
  <updated>2016-05-03T13:48:52+01:00</updated>
  <id>http://mattyw.github.io/</id>
  <author>
    <name><![CDATA[Matt Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I write go]]></title>
    <link href="http://mattyw.github.io/blog/2016/05/03/how-i-write-go/"/>
    <updated>2016-05-03T09:16:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2016/05/03/how-i-write-go</id>
    <content type="html"><![CDATA[<p>For a while I&rsquo;ve been wanting to do a short video to show my workflow for writing go.
Last week I had a small bug to fix which I thought would fit perfectly, so I recorded
me fixing it, and put some ragtime over the top.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/PEbnzuMZceA" frameborder="0" allowfullscreen></iframe>


<p>For those who are interested, here&rsquo;s a list of my tools:</p>

<ul>
<li>Tmux <a href="https://github.com/mattyw/dotfiles/blob/master/tmux.conf">(my tmux.conf is here)</a></li>
<li>Vim &ndash; with no syntax highlighting &ndash; honestly, try it.

<ul>
<li>Vim is <a href="https://github.com/mattyw/dotfiles/blob/master/vimrc#L12">configured to run gofmt on save</a></li>
</ul>
</li>
<li><a href="https://github.com/mattyw/dotfiles/blob/master/t">&ldquo;t&rdquo; is a script I wrote</a> which notifys when the process is done. This is useful for long running tests</li>
<li><a href="https://github.com/rogpeppe/godef">godef</a> and <a href="https://github.com/dgryski/vim-godef">vim-godef</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Juju, LXD, Ubuntu Snappy and a Raspberry pi 2]]></title>
    <link href="http://mattyw.github.io/blog/2015/12/02/juju-lxd-snappy-pi/"/>
    <updated>2015-12-02T23:21:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/12/02/juju-lxd-snappy-pi</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve <a href="http://blog.mattyw.net/blog/2015/10/18/snappy-juju-flasher-video/">previously</a> shown juju running on a raspberry pi 2, albeit deploying
servers in ec2. Recently the lxd project <a href="https://linuxcontainers.org/lxd/getting-started-cli/">released a snap</a> that can be used
to install lxd on ubuntu snappy, it even works on a raspberry pi 2.
Around the same time lxd provider support landed in the master branch of juju.
Naturally I thought it would be cool if I could use juju to spin up some units using lxd
on my raspberry pi 2.</p>

<p>The following video shows it in action:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/GHUWc725U84" frameborder="0" allowfullscreen></iframe>


<p>Obviously, it&rsquo;s slow and unofficial, but it&rsquo;s fun. For the curious these were the steps involved in getting this working.</p>

<ul>
<li>Juju was compiled using a raspbian image and <a href="http://dave.cheney.net/unofficial-arm-tarballs">Dave Cheney&rsquo;s arm release of go</a>.</li>
<li>I needed to turn video memory right down and the available swap space up to 1GB, my sd card will not be happy.</li>
<li>The compiled binaries were copied to my laptop where I built the juju snap and uploaded it to the raspberry pi 2 running ubuntu snappy.</li>
<li>Juju wasn&rsquo;t able to access the unix socket lxd was using. So lxd was configured to work remotely, and juju was using it remotely (they just happened to be running on the same host)</li>
<li>Some of juju&rsquo;s upstart scripts set extra limits on allowable open files and processes. upstart wouldn&rsquo;t start these services as they were beyond what was allowed. I removed these from the
upstart file, which isn&rsquo;t something you&rsquo;d want to do normally.</li>
</ul>


<p>Not exactly production ready stuff, but playing is fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go binary charm layer]]></title>
    <link href="http://mattyw.github.io/blog/2015/11/25/go-binary-charm-layer/"/>
    <updated>2015-11-25T09:26:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/11/25/go-binary-charm-layer</id>
    <content type="html"><![CDATA[<p>I like go. One of the things I like is not worrying about dependencies during deployment.
You just scp your binary to your server and you&rsquo;re done. Well, after you configure it to connect to the
database, ah yes, we forgot about haproxy, let&rsquo;s set that up as well, but after scping to
a server and doing some minor setup you&rsquo;re ready to go, scale it out you say? Just scp to other
servers, do the same config setup&hellip;&hellip;..</p>

<p>The solution to this problem is to use an orchestration tool like <a href="https://juju.ubuntu.com/about">juju</a>. Now thanks to the <a href="https://github.com/cloud-green/go-binary-layer">go binary layer</a> orchestrating your go program with juju couldn&rsquo;t be easier.</p>

<p>Here&rsquo;s how it works. The go-binary layer looks in the top level of your charm for a go-binary.yaml file that contains the name of your binary and any arguments that should be passed to it.
```yaml</p>

<h1>go-binary.yaml</h1>

<p>binary: server
args: /etc/myserver/config.yaml
```</p>

<p>Your compiled binary should be placed in a &ldquo;files&rdquo; directory at the top level of your charm. Build your charm and you&rsquo;re all done.
<code>bash
$ tree
.
├── files
│   ├── server
├── go-binary.yaml
├── layer.yaml
├── metadata.yaml
</code></p>

<p>Under the covers the go-binary layer will add your binary to $PATH,write an upstart file for your binary and start it when the server starts.</p>

<p>There are examples of this in action with the http (website) relation (<a href="https://github.com/mattyw/simple-server-charm">https://github.com/mattyw/simple-server-charm</a>)</p>

<p>and with the mongodb relation (<a href="https://github.com/mattyw/simple-server-mongo-charm">https://github.com/mattyw/simple-server-mongo-charm</a>).</p>

<p>If you&rsquo;d like to see these charms in action take a look at the following videos:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/YgYOyf-3QwU" frameborder="0" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/Cf5o58MzCjs" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The remote-deployer charm: Playing with Juju during a tea break]]></title>
    <link href="http://mattyw.github.io/blog/2015/10/29/juju-charm-shortcut/"/>
    <updated>2015-10-29T11:23:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/10/29/juju-charm-shortcut</id>
    <content type="html"><![CDATA[<p>The power of juju, and its model driven approach to deployments is
undoubtedly the relationships. Being able to specify what services you
depend on and what you provide to other services is extremely powerful.</p>

<p>To get all of those benefits you need to write your app as a charm. With the new
layering approach (<a href="http://blog.dasroot.net/2015-charming-2-point-oh.html">http://blog.dasroot.net/2015-charming-2-point-oh.html</a>) this has
got even easier. There will be more posts about that coming soon.</p>

<p>But I&rsquo;ve always pondered the following:</p>

<p><em>Is there a useful shortcut around writing a charm that would let you deploy your app in &lt; 5 minutes</em></p>

<p>My idea was the remote-deployer charm (<a href="https://jujucharms.com/u/mattyw/remote-deployer/trusty/2">https://jujucharms.com/u/mattyw/remote-deployer/trusty/2</a>)</p>

<p>It doesn&rsquo;t replace writing your own charm, indeed the cases in which it&rsquo;s useful are limited.
(you must have a publicly available file path that you want to deploy from)
<strong>The intention is to facilitate playing with juju in less time than the typical tea break.</strong></p>

<p>The idea goes:</p>

<ol>
<li>Deploy the charm</li>
<li>Give it something to do</li>
</ol>


<p><code>bash
juju deploy cs:~mattyw/trusty/remote-deployer-2
juju action do remote-deployer/0 deploy source=https://github.com/mattyw/compojure-app-bootstrap
</code></p>

<p>The something to do is just pointing it at some remote file tree (like a github url).
It downloads this file tree and looks for a file called <strong>remote-deployer</strong>. It runs this
as the ubuntu user. The example above installs the clojure build tool lein and creates
a hello world web app (<a href="https://github.com/mattyw/compojure-app-bootstrap">https://github.com/mattyw/compojure-app-bootstrap</a>)
```bash</p>

<h1>remote-deployer</h1>

<h1>!/bin/sh</h1>

<p>set -ev
sudo apt-get install -y &mdash;force-yes openjdk-7-jre-headless
sudo cp lein /usr/bin
cd $HOME &amp;&amp; lein new compojure-app my-app
cd $HOME/my-app &amp;&amp; nohup lein ring server &amp;
open-port 3000
```</p>

<p>Juju fans will notice that the normal hook tools are available to you in this file.</p>

<p>If you&rsquo;d like to suggest or help make improvements the project is here: <a href="https://github.com/mattyw/remote-deployer-charm">https://github.com/mattyw/remote-deployer-charm</a></p>

<p>Take a look at in action:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2a2WxDN4ZJM" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: Juju status flasher on ubuntu snappy]]></title>
    <link href="http://mattyw.github.io/blog/2015/10/18/snappy-juju-flasher-video/"/>
    <updated>2015-10-18T10:02:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2015/10/18/snappy-juju-flasher-video</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/JnbrWRDFqVo" frameborder="0" allowfullscreen></iframe>


<p>I&rsquo;d like to share a proof of concept project I&rsquo;ve been working on that combines
the worlds of ubuntu snappy and juju.</p>

<p>I wanted to use the flashing leds on the raspberry pi 2&rsquo;s piglow to tell me the
status of my cloud services. The idea being that if there&rsquo;s something I need to fix
the flashing leds will tell me, without me having to keep checking my phone or laptop
to get updates.</p>

<p>This demo will use the <a href="https://jujucharms.com/realtime-syslog-analytics/">realtime syslog analytics</a>
big data bundle as my example environment. It&rsquo;s deployed in ec2 but it&rsquo;s controlled and managed
by juju running on my raspberry pi. I&rsquo;m going to show you a working environment with happy led status.
Then I&rsquo;m going to cause some trouble and we&rsquo;ll see the leds change to unhappy.</p>

<p>The idea being that if I want to know the status of my cloud services I only need to glance at my
raspberry pi for a moment.</p>

<p>There&rsquo;s still some work to be done around optimising the various led patterns. There could be a way
that I could convey seriousness of the problem via the leds, or even how long there has been a problem.
That&rsquo;s work that can come later.</p>
]]></content>
  </entry>
  
</feed>
