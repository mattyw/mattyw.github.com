<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: charms | mattyw]]></title>
  <link href="http://mattyw.github.io/blog/categories/charms/atom.xml" rel="self"/>
  <link href="http://mattyw.github.io/"/>
  <updated>2015-12-03T13:08:33+00:00</updated>
  <id>http://mattyw.github.io/</id>
  <author>
    <name><![CDATA[Matt Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[go binary charm layer]]></title>
    <link href="http://mattyw.github.io/blog/2015/11/25/go-binary-charm-layer/"/>
    <updated>2015-11-25T09:26:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/11/25/go-binary-charm-layer</id>
    <content type="html"><![CDATA[<p>I like go. One of the things I like is not worrying about dependencies during deployment.
You just scp your binary to your server and you&rsquo;re done. Well, after you configure it to connect to the
database, ah yes, we forgot about haproxy, let&rsquo;s set that up as well, but after scping to
a server and doing some minor setup you&rsquo;re ready to go, scale it out you say? Just scp to other
servers, do the same config setup&hellip;&hellip;..</p>

<p>The solution to this problem is to use an orchestration tool like <a href="https://juju.ubuntu.com/about">juju</a>. Now thanks to the <a href="https://github.com/cloud-green/go-binary-layer">go binary layer</a> orchestrating your go program with juju couldn&rsquo;t be easier.</p>

<p>Here&rsquo;s how it works. The go-binary layer looks in the top level of your charm for a go-binary.yaml file that contains the name of your binary and any arguments that should be passed to it.
```yaml</p>

<h1>go-binary.yaml</h1>

<p>binary: server
args: /etc/myserver/config.yaml
```</p>

<p>Your compiled binary should be placed in a &ldquo;files&rdquo; directory at the top level of your charm. Build your charm and you&rsquo;re all done.
<code>bash
$ tree
.
├── files
│   ├── server
├── go-binary.yaml
├── layer.yaml
├── metadata.yaml
</code></p>

<p>Under the covers the go-binary layer will add your binary to $PATH,write an upstart file for your binary and start it when the server starts.</p>

<p>There are examples of this in action with the http (website) relation (<a href="https://github.com/mattyw/simple-server-charm">https://github.com/mattyw/simple-server-charm</a>)</p>

<p>and with the mongodb relation (<a href="https://github.com/mattyw/simple-server-mongo-charm">https://github.com/mattyw/simple-server-mongo-charm</a>).</p>

<p>If you&rsquo;d like to see these charms in action take a look at the following videos:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/YgYOyf-3QwU" frameborder="0" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/Cf5o58MzCjs" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The remote-deployer charm: Playing with Juju during a tea break]]></title>
    <link href="http://mattyw.github.io/blog/2015/10/29/juju-charm-shortcut/"/>
    <updated>2015-10-29T11:23:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/10/29/juju-charm-shortcut</id>
    <content type="html"><![CDATA[<p>The power of juju, and its model driven approach to deployments is
undoubtedly the relationships. Being able to specify what services you
depend on and what you provide to other services is extremely powerful.</p>

<p>To get all of those benefits you need to write your app as a charm. With the new
layering approach (<a href="http://blog.dasroot.net/2015-charming-2-point-oh.html">http://blog.dasroot.net/2015-charming-2-point-oh.html</a>) this has
got even easier. There will be more posts about that coming soon.</p>

<p>But I&rsquo;ve always pondered the following:</p>

<p><em>Is there a useful shortcut around writing a charm that would let you deploy your app in &lt; 5 minutes</em></p>

<p>My idea was the remote-deployer charm (<a href="https://jujucharms.com/u/mattyw/remote-deployer/trusty/2">https://jujucharms.com/u/mattyw/remote-deployer/trusty/2</a>)</p>

<p>It doesn&rsquo;t replace writing your own charm, indeed the cases in which it&rsquo;s useful are limited.
(you must have a publicly available file path that you want to deploy from)
<strong>The intention is to facilitate playing with juju in less time than the typical tea break.</strong></p>

<p>The idea goes:</p>

<ol>
<li>Deploy the charm</li>
<li>Give it something to do</li>
</ol>


<p><code>bash
juju deploy cs:~mattyw/trusty/remote-deployer-2
juju action do remote-deployer/0 deploy source=https://github.com/mattyw/compojure-app-bootstrap
</code></p>

<p>The something to do is just pointing it at some remote file tree (like a github url).
It downloads this file tree and looks for a file called <strong>remote-deployer</strong>. It runs this
as the ubuntu user. The example above installs the clojure build tool lein and creates
a hello world web app (<a href="https://github.com/mattyw/compojure-app-bootstrap">https://github.com/mattyw/compojure-app-bootstrap</a>)
```bash</p>

<h1>remote-deployer</h1>

<h1>!/bin/sh</h1>

<p>set -ev
sudo apt-get install -y &mdash;force-yes openjdk-7-jre-headless
sudo cp lein /usr/bin
cd $HOME &amp;&amp; lein new compojure-app my-app
cd $HOME/my-app &amp;&amp; nohup lein ring server &amp;
open-port 3000
```</p>

<p>Juju fans will notice that the normal hook tools are available to you in this file.</p>

<p>If you&rsquo;d like to suggest or help make improvements the project is here: <a href="https://github.com/mattyw/remote-deployer-charm">https://github.com/mattyw/remote-deployer-charm</a></p>

<p>Take a look at in action:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/2a2WxDN4ZJM" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
</feed>
