<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: go | mattyw]]></title>
  <link href="http://mattyw.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://mattyw.github.io/"/>
  <updated>2016-05-03T13:48:52+01:00</updated>
  <id>http://mattyw.github.io/</id>
  <author>
    <name><![CDATA[Matt Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I write go]]></title>
    <link href="http://mattyw.github.io/blog/2016/05/03/how-i-write-go/"/>
    <updated>2016-05-03T09:16:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2016/05/03/how-i-write-go</id>
    <content type="html"><![CDATA[<p>For a while I&rsquo;ve been wanting to do a short video to show my workflow for writing go.
Last week I had a small bug to fix which I thought would fit perfectly, so I recorded
me fixing it, and put some ragtime over the top.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/PEbnzuMZceA" frameborder="0" allowfullscreen></iframe>


<p>For those who are interested, here&rsquo;s a list of my tools:</p>

<ul>
<li>Tmux <a href="https://github.com/mattyw/dotfiles/blob/master/tmux.conf">(my tmux.conf is here)</a></li>
<li>Vim &ndash; with no syntax highlighting &ndash; honestly, try it.

<ul>
<li>Vim is <a href="https://github.com/mattyw/dotfiles/blob/master/vimrc#L12">configured to run gofmt on save</a></li>
</ul>
</li>
<li><a href="https://github.com/mattyw/dotfiles/blob/master/t">&ldquo;t&rdquo; is a script I wrote</a> which notifys when the process is done. This is useful for long running tests</li>
<li><a href="https://github.com/rogpeppe/godef">godef</a> and <a href="https://github.com/dgryski/vim-godef">vim-godef</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go binary charm layer]]></title>
    <link href="http://mattyw.github.io/blog/2015/11/25/go-binary-charm-layer/"/>
    <updated>2015-11-25T09:26:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/11/25/go-binary-charm-layer</id>
    <content type="html"><![CDATA[<p>I like go. One of the things I like is not worrying about dependencies during deployment.
You just scp your binary to your server and you&rsquo;re done. Well, after you configure it to connect to the
database, ah yes, we forgot about haproxy, let&rsquo;s set that up as well, but after scping to
a server and doing some minor setup you&rsquo;re ready to go, scale it out you say? Just scp to other
servers, do the same config setup&hellip;&hellip;..</p>

<p>The solution to this problem is to use an orchestration tool like <a href="https://juju.ubuntu.com/about">juju</a>. Now thanks to the <a href="https://github.com/cloud-green/go-binary-layer">go binary layer</a> orchestrating your go program with juju couldn&rsquo;t be easier.</p>

<p>Here&rsquo;s how it works. The go-binary layer looks in the top level of your charm for a go-binary.yaml file that contains the name of your binary and any arguments that should be passed to it.
```yaml</p>

<h1>go-binary.yaml</h1>

<p>binary: server
args: /etc/myserver/config.yaml
```</p>

<p>Your compiled binary should be placed in a &ldquo;files&rdquo; directory at the top level of your charm. Build your charm and you&rsquo;re all done.
<code>bash
$ tree
.
├── files
│   ├── server
├── go-binary.yaml
├── layer.yaml
├── metadata.yaml
</code></p>

<p>Under the covers the go-binary layer will add your binary to $PATH,write an upstart file for your binary and start it when the server starts.</p>

<p>There are examples of this in action with the http (website) relation (<a href="https://github.com/mattyw/simple-server-charm">https://github.com/mattyw/simple-server-charm</a>)</p>

<p>and with the mongodb relation (<a href="https://github.com/mattyw/simple-server-mongo-charm">https://github.com/mattyw/simple-server-mongo-charm</a>).</p>

<p>If you&rsquo;d like to see these charms in action take a look at the following videos:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/YgYOyf-3QwU" frameborder="0" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/Cf5o58MzCjs" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generics and monads in good time]]></title>
    <link href="http://mattyw.github.io/blog/2015/04/08/generics-and-monads-in-good-time/"/>
    <updated>2015-04-08T09:11:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2015/04/08/generics-and-monads-in-good-time</id>
    <content type="html"><![CDATA[<p>In this blog post I attempt to connect monads in haskell with generics in go, avoiding flame wars as I go.
If I&rsquo;ve made mistakes please let me know and I&rsquo;ll gladly fix them.</p>

<h2>The Thought</h2>

<p>I&rsquo;ve just finished listening to episode 10 of the <a href="http://bikeshed.fm/10">bikeshed</a> which is
largely a discussion about haskell, and well worth a listen to. However the conversation that starts
at around 29:40 is what triggered this thought.</p>

<h2>Haskell without monads</h2>

<p>If you want to do IO in Haskell you need to use monads. But it&rsquo;s possible to write a number of programs without IO(1).</p>

<p>According to <a href="http://haskell.cs.yale.edu/wp-content/uploads/2011/02/history.pdf">&ldquo;A history of haskell, being lazy with class&rdquo;</a> 6 years passed between the first
release of haskell, and monadic IO being introduced.
Why so long?</p>

<p><strong>The language designers were under no pressure, they had time to think about how IO should be dealt with in the language.</strong></p>

<h2>The question of Go Generics</h2>

<p>Go doesn&rsquo;t support generics, and it&rsquo;s often cited as a big downside or even a failing of the language. However you can still write very useful programs in go
without generics(1). But here&rsquo;s the thing:</p>

<p><strong>The language designers are under no pressure, they have time to think about how generics should be dealt with in the language.</strong></p>

<p>This is important. Just because a language doesn&rsquo;t do something now, doesn&rsquo;t mean it never will.
If you&rsquo;ve not taken a look at go previously because you&rsquo;ve been swayed by the &ldquo;no generics&rdquo; argument I recomend taking a look at go again.</p>

<p>(1) An infinite number for maths fans</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go playground as a service]]></title>
    <link href="http://mattyw.github.io/blog/2013/10/30/go-playground-as-a-service/"/>
    <updated>2013-10-30T13:08:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2013/10/30/go-playground-as-a-service</id>
    <content type="html"><![CDATA[<p><strong><em>Update</em></strong>: So I&rsquo;ve learned that there&rsquo;s actually some work to be done here around sandboxing before it&rsquo;s actually ready for public use. Until then I&rsquo;ve removed the server, but the code is still available if you want to play around with it in a trusted setting.</p>

<p>One of the great things about go is the whole environment you get with it, gofmt, godoc, go get. It&rsquo;s all good stuff.
There&rsquo;s also a <a href="http://play.golang.org">playground</a> for you to try things out on.
The docs also have runnable examples in them based off a similar idea:
<a href="http://golang.org/pkg/encoding/json/#example_Unmarshal">http://golang.org/pkg/encoding/json/#example_Unmarshal</a></p>

<p>It&rsquo;s a great idea, it means you can actually try the code out while you&rsquo;re reading the docs. But it only works on code from the stdlib. But that makes sense doesn&rsquo;t it? You don&rsquo;t want to allow anyone to import some arbitrary package.</p>

<p>But it occured to me that when someone develops a package, the author might want to include runnable examples for their own code.</p>

<p>The source for something similar to the playgrond is incuded in the go release (misc/goplay) I&rsquo;ve modified it very slightly to allow /compile to be called from any location.
I&rsquo;ve called it <a href="http://github.com/mattyw/goplaas">goplaas</a> (It&rsquo;s not really as a service, but that&rsquo;s the standard suffix these days isn' it? And it got your attention!)</p>

<p>The idea is you install it on your own server, and it will have access to anything installed on your GOPATH. This means you can control what packages can be imported, and also the version.</p>

<p>All you need to do is put some javascript and a textarea into a webpage, point it to your server and you&rsquo;re done.</p>

<p>Here&rsquo;s an example using the loggo package from launchpad.net. Try it</p>

<p><code>
I've removed it - sorry
</code></p>

<p>I&rsquo;ll try to keep my server running with goplaas for the next few weeks. If it suddenly stops working, it&rsquo;s likely that I&rsquo;ve pulled the server down. You can experiment yourself by running
<code>bash
go install github.com/mattyw/goplaas
./goplaas -http :9999 #Listen on 9999
</code>
goplaas includes a -compile flag for sending compilation instructions to another server, full instructions are in github.</p>

<p>A good next step would be to package this all up into a docker container to allow anyone to install it with relative ease</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure programming in acme]]></title>
    <link href="http://mattyw.github.io/blog/2013/10/17/clojure-programming-in-acme/"/>
    <updated>2013-10-17T14:04:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/10/17/clojure-programming-in-acme</id>
    <content type="html"><![CDATA[<p>Today I finally got round to trying out something i&rsquo;d been meaning to look into for nearly a year, and seeing as clojure and editors seems to be a topic again I thought it would help add some diversity.</p>

<p>Acme is an editor unlike any other. It was designed by Rob Pike for Plan9 (although it&rsquo;s available for unix-like systems using <a href="http://swtch.com/plan9port/">Plan9 from User Space</a>).
It&rsquo;s designed to be an editor and shell. Unlike emacs and vim which encourage you to keep your hands on the keyboard, acme requires use of a 3-button mouse, and it supports something called mouse chording. A rough guide would be:</p>

<ul>
<li>Button 1: Select Text</li>
<li>Button 2: Execute Command</li>
<li>Button 3: Search/ acquire text (or load file)</li>
<li>Button 1-2 Cutting</li>
<li>Button 1-3 Pasting</li>
<li>Button 1-2,3 Cut+Paste (Copy)</li>
</ul>


<p>My introduction to acme was via Russ Cox' video, which is a great starting point:</p>

<iframe width="560" height="315" src="http://mattyw.github.io//www.youtube.com/embed/dP1xVpMPn8M" frameborder="0" allowfullscreen></iframe>


<p>You can probably summarise the whole thing by saying that in acme &ndash; text is data. Once you type some text, it can be saved into a file, executed as a command or passed as an argument to a command.</p>

<p>Obviously this resonated with the clojure part of my brain. It occured to me that being able to select some clojure code in acme and evaluate it would make acme a great editor for clojure.</p>

<p>Thanks to nrepl the job is really quite easy. I wrote a very <em>very</em> simple nrepl client in go. You can find it on my <a href="https://github.com/mattyw/gonrepl">github</a></p>

<p>All it does is read clojure code from stdin and send it to nrepl. This is really all there is to do. In acme you just need to type your command in one of the scratch areas:</p>

<p>Take a look at the below screenshot. You can see:</p>

<ol>
<li>In yellow: selected clojure code with mouse button 1</li>
<li>In red: selected command with mouse button two</li>
<li>Release the buttons and the window in the bottom right contains the evalutated code</li>
</ol>


<p><a href="http://imgur.com/NoEHuqV"><img src="http://i.imgur.com/NoEHuqV.png" title="Hosted by imgur.com" /></a></p>

<p>Here&rsquo;s a video of me doing it:</p>

<iframe src="http://mattyw.github.io//player.vimeo.com/video/77128688" width="500" height="345" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p> <p><a href="http://vimeo.com/77128688">Clojure in Acme</a> from <a href="http://vimeo.com/user5806599">Matthew Williams</a> on <a href="https://vimeo.com">Vimeo</a>.</p></p>

<p>To get this setup yourself:</p>

<ol>
<li>Install plan9 from user space to get acme</li>
<li>run lein repl in some terminal</li>
<li>You&rsquo;ll need a command line tool that can take clojure code on stdin and send it to nrepl. I used my own gonrepl tool- To use that you need to install go then run:</li>
</ol>


<p><code>bash
go install github.com/mattyw/gonrepl/...
</code></p>

<p>That&rsquo;s it. Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
