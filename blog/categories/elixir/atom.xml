<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elixir | mattyw]]></title>
  <link href="http://mattyw.github.io/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://mattyw.github.io/"/>
  <updated>2015-04-02T17:06:52+01:00</updated>
  <id>http://mattyw.github.io/</id>
  <author>
    <name><![CDATA[Matt Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[simple macros in clojure and elixir]]></title>
    <link href="http://mattyw.github.io/blog/2013/08/13/simple-macros-in-clojure-and-elixir/"/>
    <updated>2013-08-13T17:34:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/08/13/simple-macros-in-clojure-and-elixir</id>
    <content type="html"><![CDATA[<p>Don&rsquo;t write macros is a pretty good rule, but when you&rsquo;re learning a language it&rsquo;s quite a fun little exercise.
One such exercise I like to try is this:</p>

<p><strong>Write a function so that I can call system commands without having to wrap them in quotes.</strong></p>

<p>So rather than doing this:</p>

<p>cmd([&ldquo;grep&rdquo;, &ldquo;-rin&rdquo;, &ldquo;foo&rdquo;, &ldquo;./&rdquo;])</p>

<p>I can do this:</p>

<p>cmd([grep, -rin, foo, ./])</p>

<h3>Clojure</h3>

<p>In lisps like clojure, the solution is very elegant, thanks to the minimal syntax, you end up with something like:</p>

<p><code>clojure
(call grep -rin foo "./")
</code></p>

<p>And the macro to do it is also pretty elegant:</p>

<p><code>clojure
(defmacro mcall [&amp; args]
  (let [sym (gensym)]
  `(apply sh (map str '~args))))
</code></p>

<p>Not too much magic (as far as macros are concerned) here. Make a unique symbol with (gensysm) to keep our macro hygienic.
We syntax quote our whole list using ` to not evaluate anything unless we say so. That means we have to do some magic with our args parameter: &lsquo;~args. ~ here means
evaluate args (so we get the symbols we passed in) but then we quote with &rsquo; so that we don&rsquo;t evaluate these symbols. That&rsquo;s the magic that lets us not need quotes around our arguments.
The rest of the code just puts them in the right place by mapping our args list against the str function and applying it to sh.
This is how you use it:</p>

<p><code>clojure
(prn (mcall ls -l))
(prn (mcall grep -rin not "./")) ; We still need quotes around ./ because it's not valid syntax
</code></p>

<p>By coincidence I blogged about clojure macros almost exactly one year ago: <a href="http://mattyjwilliams.blogspot.co.uk/2012/08/another-clojure-macro-tutorial-that-no.html">http://mattyjwilliams.blogspot.co.uk/2012/08/another-clojure-macro-tutorial-that-no.html</a></p>

<h3>Elixir</h3>

<p>Elixir is a lovely little language I&rsquo;ve been playing with recently, so naturally I wanted to try out the macros.
I needed to ask a few questions on the irc channel (thanks ericmj and true_droid!), but I got it cracked:</p>

<p>```elixir
defmacro mcall(args) do</p>

<pre><code>call = Enum.map_join(args, " ", Macro.to_string(&amp;1))
quote do
  System.cmd(unquote(call))
end
</code></pre>

<p>end
<code>
Again, not much magic, map_join maps our list using the Macro.to_string function then joins at the end, this is done outside of the quote since we will work it out at compile time.
We then pass this to System.cmd in a quote block - which means don't evaluate this yet, that will happen when we call mcall at runtime.
</code>elixir
IO.inspect MacroTest.mcall([ls, -l])
IO.inspect MacroTest.mcall([grep, -rin, def, &ldquo;./&rdquo;]) # We still need quotes around ./ because it&rsquo;s not valid syntax
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[why I like elixir (and other go programmers might too)]]></title>
    <link href="http://mattyw.github.io/blog/2013/06/17/why-i-like-elixir/"/>
    <updated>2013-06-17T21:10:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/06/17/why-i-like-elixir</id>
    <content type="html"><![CDATA[<h2>My journey to elixir</h2>

<p>Erlang was the first functional language I ever used. When I first started reading <a href="http://pragprog.com/book/jaerlang/programming-erlang">Programming Erlang</a> by Joe Armstrong I was hooked, I was fascinated in a language where &ldquo;=&rdquo; didn&rsquo;t indicate an assignment, and the idea of pattern matching immediately struck a chord with me, I loved the one module per &lsquo;process&rsquo; thing. Erlang was set to become my favourite language, there was only one problem.</p>

<p>I didn&rsquo;t like the syntax</p>

<p>It&rsquo;s a completely personal view, I know people who love the syntax, I just didn&rsquo;t. To me it just didn&rsquo;t have what Christopher Alexander in &ldquo;The Timeless way of building&rdquo; calls &ldquo;quality without a name&rdquo;. I suppose I just didn&rsquo;t find it fun to type. So after re writing a couple of internal libraries in erlang to see what they looked like (they were much shorter and quite easy to read) I stopped using it, and started playing around with other languages like haskell and clojure.</p>

<p>Clojure was my first lisp dialect and I enjoy it alot, the syntax, the whole homoiconicity thing, macro&rsquo;s aren&rsquo;t something you should use all the time &ndash; but it&rsquo;s comforting to know they&rsquo;re there to fall back on if you need them.</p>

<p>Parallel to this functional language experimentation was another path &ndash; languages I used at work, which has seen me recently move from writing mostly in Python to Go. Go&rsquo;s channels and go routines are great, but when I started writing go code seriously (about 8 months ago) there was something that immediately stuck me.</p>

<p>```go
thing, err := someFunction()
if err != nil {</p>

<pre><code>//handle the error
</code></pre>

<p>}
```
Now, I&rsquo;m not going to start complaining about go&rsquo;s error handling, because I like it. But sometimes I would like to be able to make use of pattern matching and do something like this:</p>

<p><code>go
{thing, nil} = someFunction()
</code></p>

<p>And have my goroutine just dies if it fails. I know that&rsquo;s not go&rsquo;s philosophy with errors, and that&rsquo;s fine. I&rsquo;m just saying.</p>

<h2>Work and Fun Collide</h2>

<p>I&rsquo;ve spent the past 6 months saying to people that I would like a lisp dialect to be built onto go. What I really meant was I wanted a language that would let me do go style concurrency and play around with a repl, macros and all that functional programming <em>fun</em> stuff.</p>

<p>It looks to me that elixir provides exactly that.</p>

<p>Just look at these two programs. Both call a 10 second sleeping function on a seperate &lsquo;thread&rsquo; and wait for the response. The first in go, the second in elixir.
```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"time"
</code></pre>

<p>)</p>

<p>func longRun(response chan string) {</p>

<pre><code>time.Sleep(10e9)
response &lt;- "done"
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>response := make(chan string)
go longRun(response)
value := &lt;-response
fmt.Println(value)
</code></pre>

<p>}
<code>
</code>elixir
defmodule Main do</p>

<p>  def longRun(pid) do</p>

<pre><code>:timer.sleep(10000)
pid &lt;- {:result, :done}
</code></pre>

<p>  end</p>

<p>  def main() do</p>

<pre><code>spawn(__MODULE__, :longRun, [self])
receive do
  {:result, value} -&gt;
    IO.puts value
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>Main.main()
```</p>

<p>They&rsquo;re not too different, elixir has spawn where go has &lsquo;go&rsquo; and elxir has receive where go has select. There&rsquo;s no denying that they&rsquo;re completely different languages, in some rather crude tests I&rsquo;ve done go does seem to be largely faster, but elixir let&rsquo;s me do meta-programming whilst forgetting about types.</p>

<p>I expect to be blogging alot more about elixir in the future</p>
]]></content>
  </entry>
  
</feed>
