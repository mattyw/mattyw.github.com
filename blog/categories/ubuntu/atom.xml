<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | mattyw]]></title>
  <link href="http://mattyw.github.io/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://mattyw.github.io/"/>
  <updated>2015-12-03T13:08:33+00:00</updated>
  <id>http://mattyw.github.io/</id>
  <author>
    <name><![CDATA[Matt Williams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Juju, LXD, Ubuntu Snappy and a Raspberry pi 2]]></title>
    <link href="http://mattyw.github.io/blog/2015/12/02/juju-lxd-snappy-pi/"/>
    <updated>2015-12-02T23:21:00+00:00</updated>
    <id>http://mattyw.github.io/blog/2015/12/02/juju-lxd-snappy-pi</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve <a href="http://blog.mattyw.net/blog/2015/10/18/snappy-juju-flasher-video/">previously</a> shown juju running on a raspberry pi 2, albeit deploying
servers in ec2. Recently the lxd project <a href="https://linuxcontainers.org/lxd/getting-started-cli/">released a snap</a> that can be used
to install lxd on ubuntu snappy, it even works on a raspberry pi 2.
Around the same time lxd provider support landed in the master branch of juju.
Naturally I thought it would be cool if I could use juju to spin up some units using lxd
on my raspberry pi 2.</p>

<p>The following video shows it in action:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/GHUWc725U84" frameborder="0" allowfullscreen></iframe>


<p>Obviously, it&rsquo;s slow and unofficial, but it&rsquo;s fun. For the curious these were the steps involved in getting this working.</p>

<ul>
<li>Juju was compiled using a raspbian image and <a href="http://dave.cheney.net/unofficial-arm-tarballs">Dave Cheney&rsquo;s arm release of go</a>.</li>
<li>I needed to turn video memory right down and the available swap space up to 1GB, my sd card will not be happy.</li>
<li>The compiled binaries were copied to my laptop where I built the juju snap and uploaded it to the raspberry pi 2 running ubuntu snappy.</li>
<li>Juju wasn&rsquo;t able to access the unix socket lxd was using. So lxd was configured to work remotely, and juju was using it remotely (they just happened to be running on the same host)</li>
<li>Some of juju&rsquo;s upstart scripts set extra limits on allowable open files and processes. upstart wouldn&rsquo;t start these services as they were beyond what was allowed. I removed these from the
upstart file, which isn&rsquo;t something you&rsquo;d want to do normally.</li>
</ul>


<p>Not exactly production ready stuff, but playing is fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video: Juju status flasher on ubuntu snappy]]></title>
    <link href="http://mattyw.github.io/blog/2015/10/18/snappy-juju-flasher-video/"/>
    <updated>2015-10-18T10:02:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2015/10/18/snappy-juju-flasher-video</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/JnbrWRDFqVo" frameborder="0" allowfullscreen></iframe>


<p>I&rsquo;d like to share a proof of concept project I&rsquo;ve been working on that combines
the worlds of ubuntu snappy and juju.</p>

<p>I wanted to use the flashing leds on the raspberry pi 2&rsquo;s piglow to tell me the
status of my cloud services. The idea being that if there&rsquo;s something I need to fix
the flashing leds will tell me, without me having to keep checking my phone or laptop
to get updates.</p>

<p>This demo will use the <a href="https://jujucharms.com/realtime-syslog-analytics/">realtime syslog analytics</a>
big data bundle as my example environment. It&rsquo;s deployed in ec2 but it&rsquo;s controlled and managed
by juju running on my raspberry pi. I&rsquo;m going to show you a working environment with happy led status.
Then I&rsquo;m going to cause some trouble and we&rsquo;ll see the leds change to unhappy.</p>

<p>The idea being that if I want to know the status of my cloud services I only need to glance at my
raspberry pi for a moment.</p>

<p>There&rsquo;s still some work to be done around optimising the various led patterns. There could be a way
that I could convey seriousness of the problem via the leds, or even how long there has been a problem.
That&rsquo;s work that can come later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Juju means I don't need a VPS]]></title>
    <link href="http://mattyw.github.io/blog/2013/08/16/why-juju-means-i-dont-need-a-vps/"/>
    <updated>2013-08-16T13:45:00+01:00</updated>
    <id>http://mattyw.github.io/blog/2013/08/16/why-juju-means-i-dont-need-a-vps</id>
    <content type="html"><![CDATA[<p>tl;dr: <a href="http://juju.ubuntu.com">Juju</a> is aimed at deploying and scaling hundreds of services. But it&rsquo;s also a handy alternative to buying a VPS.</p>

<p>I don&rsquo;t have a VPS, I have in the past but I&rsquo;ve never used them enough for me to be able to justify the cost long term.
Juju provides a perfect solution to this use case.</p>

<p>I have a very simple charm I call <a href="https://github.com/mattyw/charm_collection/tree/master/charms/precise/devenv">devenv</a>, it doesn&rsquo;t do much more than install stuff I use for doing development, like installing tmux and grabbing my configuration files. I&rsquo;ve blogged about it previously <a href="http://mattyjwilliams.blogspot.co.uk/2013/05/deploying-development-machine-with-juju.html">here</a>.</p>

<p>This week I was having trouble getting a client library to connect to a simple server program I&rsquo;d written, I was lost with debugging but luckily the library author volunteered to help me out.
I already had a binary of the server that could be used to generate the error in the client library, but I don&rsquo;t have a VPS, so what&rsquo;s the quickest way for me to make the server public so the library author can play around with it?</p>

<p><a href="http://juju.ubuntu.com">Juju!</a></p>

<p>All I needed to do was to add the following line to the start hook of my devenv charm:</p>

<p><code>bash
./app &amp;
</code></p>

<p>And copy the app binary to my charm directory.</p>

<p>It&rsquo;s sort of an anti pattern &ndash; but because juju copies the whole charm dir when it deploys, it will grab any binaries in the charm dir as well, it&rsquo;s not a great idea to make use of this for serious deployments, but for me it was great</p>

<p>With that done all I had to do was deploy it:
<code>bash
juju bootstrap
juju deploy --repository=charms local:precise/devenv
</code></p>

<p>From deciding I wanted to deploy the binary &ndash; to having it deployed was under 5 minutes. 20 minutes later the library was fixed and the server was taken down
<code>bash
juju destroy-environment
</code></p>

<p>That was it. All in all it cost around $0.02 (that&rsquo;s just over 1p). Much better than having a VPS that would largely sit idle.</p>

<p>Of course the other advantage with using juju is that I&rsquo;m not tied to a particular cloud provider, so I can choose which one I want depending on the pricing at that moment. And since juju now supports local mode you can do your charm development offline to save even more money!</p>

<p><strong>Great, how does this help me?</strong></p>

<p>If you&rsquo;re thinking of getting a VPS &ndash; but don&rsquo;t feel you can justify the cost because of the amount of use you&rsquo;d get out of it, then you really should try out juju. Once you&rsquo;ve got it installed there&rsquo;s a handy charm that just deploys ubuntu server, it&rsquo;s a great starting point for writing a charm to setup your own development environment.
<code>bash
juju deploy ubuntu
</code></p>

<p>Here&rsquo;s another link to my post about writing a charm to build a development machine: <a href="http://mattyjwilliams.blogspot.co.uk/2013/05/deploying-development-machine-with-juju.html">http://mattyjwilliams.blogspot.co.uk/2013/05/deploying-development-machine-with-juju.html</a></p>
]]></content>
  </entry>
  
</feed>
